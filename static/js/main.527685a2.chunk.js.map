{"version":3,"sources":["front.png","back.png","Coin.js","Counter.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coin","className","this","props","rotate","side","src","front","alt","back","Component","Counter","Game","state","clickHandler","bind","option","Math","round","random","setState","setTimeout","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,wQCsB5BC,G,6KAdP,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAWC,KAAKC,MAAMC,OAAX,yEACQ,UAAlBF,KAAKC,MAAME,KAAiB,yBAAKC,IAAKC,IAAOC,IAAI,iBAAmB,yBAAKF,IAAKG,IAAMD,IAAI,iBAG9F,yBAAKP,UAAWC,KAAKC,MAAMC,OAAX,sEACI,SAAlBF,KAAKC,MAAME,KAAgB,yBAAKC,IAAKC,IAAOC,IAAI,iBAAmB,yBAAKF,IAAKG,IAAMD,IAAI,sB,GATtFE,cCMJC,E,uKARP,OACI,yBAAKV,UAAU,WACX,qCAAWC,KAAKC,MAAMI,MAAML,KAAKC,MAAMM,KAAvC,2BAAqEP,KAAKC,MAAMI,MAAhF,cAAkGL,KAAKC,MAAMM,KAA7G,gB,GAJMC,aCkCPE,G,wDA9BX,WAAYT,GAAO,IAAD,8BACd,cAAMA,IACDU,MAAQ,CAAER,KAAM,QAASE,MAAO,EAAGE,KAAM,EAAGL,QAAQ,GACzD,EAAKU,aAAe,EAAKA,aAAaC,KAAlB,gBAHN,E,2DAMH,IAAD,OACNC,EAASC,KAAKC,MAAMD,KAAKE,UAC7BjB,KAAKkB,SAAS,CAAEhB,QAAQ,IACxBiB,YAAW,WACP,EAAKD,SAAS,CAAEhB,QAAQ,IACT,IAAXY,EACA,EAAKI,SAAS,CAAEf,KAAM,QAASE,MAAO,EAAKM,MAAMN,MAAQ,IAEzD,EAAKa,SAAS,CAAEf,KAAM,OAAQI,KAAM,EAAKI,MAAMJ,KAAO,MAE3D,O,+BAIH,OACI,yBAAKR,UAAU,QACX,kBAAC,EAAD,CAAMI,KAAMH,KAAKW,MAAMR,KAAMD,OAAQF,KAAKW,MAAMT,SAChD,4BAAQkB,QAASpB,KAAKY,aAAcS,SAAUrB,KAAKW,MAAMT,QAAzD,aACA,kBAAC,EAAD,CAASG,MAAOL,KAAKW,MAAMN,MAAOE,KAAMP,KAAKW,MAAMJ,Y,GAzBhDC,cCOJc,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.527685a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/front.fe7bfc02.png\";","module.exports = __webpack_public_path__ + \"static/media/back.cbda9acc.png\";","import React, {Component} from \"react\";\r\nimport front from \"./front.png\";\r\nimport back from \"./back.png\";\r\nimport \"./Coin.css\";\r\n\r\n\r\nclass Coin extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"Coin\">\r\n                <div className={this.props.rotate ? `Coin-side Coin-side-front animation-front` : `Coin-side Coin-side-front`}>\r\n                    { this.props.side===\"front\" ? <img src={front} alt=\"Coin's front\"/> : <img src={back} alt=\"Coin's back\"/>}\r\n                </div>\r\n\r\n                <div className={this.props.rotate ? `Coin-side Coin-side-back animation-back` : `Coin-side Coin-side-back`}>\r\n                { this.props.side===\"back\" ? <img src={front} alt=\"Coin's front\"/> : <img src={back} alt=\"Coin's back\"/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Coin;","import React, {Component} from \"react\";\r\n\r\nclass Counter extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"Counter\">\r\n                <p>Out of {this.props.front+this.props.back} flips, there have been {this.props.front} heads and {this.props.back} tails.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter;","import React, {Component} from \"react\";\r\nimport Coin from \"./Coin\";\r\nimport Counter from \"./Counter\";\r\nimport \"./Game.css\";\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { side: \"front\", front: 0, back: 0, rotate: false}\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n    }\r\n\r\n    clickHandler(){\r\n        let option = Math.round(Math.random());\r\n        this.setState({ rotate: true });\r\n        setTimeout(()=>{\r\n            this.setState({ rotate: false });\r\n            if (option === 0) {\r\n                this.setState({ side: \"front\", front: this.state.front + 1 });\r\n            } else {\r\n                this.setState({ side: \"back\", back: this.state.back + 1 });\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Game\">\r\n                <Coin side={this.state.side} rotate={this.state.rotate} />\r\n                <button onClick={this.clickHandler} disabled={this.state.rotate}>Flip coin</button>\r\n                <Counter front={this.state.front} back={this.state.back}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport './App.css';\r\nimport Game from \"./Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}